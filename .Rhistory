# one_simulation() function computes a single evaluation run for a given setup
#' @param dgp_method: type: vector of char with dgp method ("uni" or "multi")
#' @param arg=NULL: type: list - contains the arguments to be passed to dgp_uni() / dgp_multi() function to simulate the data
#' @param max_method: type: vector of char with max method, any combination of 'symmetric','sparse','optim'
#' @param dist_method: type: vector of char with dist method, any combination of 'Gini', 'CLF'
#' @param anchor_method: type: vector of char with anchor method, any combination of "constant4_AO", "constant4_MPT", "iterativeForward_MTT", "Alignment"
#' @param alias_method: type: vector of char with alias method, any combination of "constant4_MPT", "quasi_var", "min_dist"
#' @return list containing DIFtest results and additional information (DIFindex,DIFside,npeaks)
one_simulation <- function(dgp_method=c('uni','multi'), arg=NULL,
max_method=c('symmetric','sparse','optim'), dist_method = c('Gini', 'CLF'),
anchor_method = c("constant4_AO", "constant4_MPT", "iterativeForward_MTT", "Alignment"), alias_method = c("constant4_MPT", "quasi_var", "min_dist"),
...){
# Simulate data using either the unidimensional function dgp_uni() or the multidimensional function dgp_multi()
if(dgp_method=='uni'){
mydgp <- anchorpoint::getData(nobs = arg$nobs,tlength = arg$tlength,DIFpercent = arg$DIFpercent,type = dgp_method,
DIFpattern = arg$DIFpattern,DIFeffect = arg$DIFeffect,DIFamount = arg$DIFamount,ability = arg$ability)$DGP
}else if(dgp_method=='multi'){
mydgp <- anchorpoint::getData(nobs = arg$nobs,tlength = arg$tlength,DIFpercent = arg$DIFpercent,type = dgp_method,Nr.dim = arg$Nr.dim, Theta = arg$Theta,
arg$discriminations,arg$difficulties,arg$DIF_mode, arg$d_distr,arg$MultiNorm,arg$itemtype)$DGP
}else{
'Choose a method to generate the data, either dgp or dgp2.'
}
## Find the Rasch model objects rm1 and rm2 for both groups using raschFit().
rm <- anchorpoint:::raschFit(data = mydgp$dat, resp.mat.name = 'i', group.name = 'groups')
rm1 <- rm$rm1
rm2 <- rm$rm2
# it happend that some particular outputs from dgp_uni() had the function raschFit produce incomplete rasch models which led to an error
# when using the function anchortest() later on. Therefore, the rasch models are checked for completeness and, as long as they are not, the
# data it recomputed (as further computation is not
# meaningful when having incomple rasch models).
# To prevent infinit loops, this is only done for some time threshold
#in multi dimensional case, infinite parameters where calculated which also causes the anchortest() function to fail.
#Therefore also these cases get intercepted.
start_time = Sys.time()
while((any(is.na(c(stats::coef(psychotools::itempar(rm1)),stats::coef(psychotools::itempar(rm2))))) || any(is.infinite(c(stats::coef(psychotools::itempar(rm1)),stats::coef(psychotools::itempar(rm2))))))){
if(dgp_method=='uni') mydgp <- anchorpoint:::dgp_uni(arg$nobs,arg$tlength,arg$DIFpercent,
arg$DIFpattern,arg$DIFeffect,arg$DIFamount,arg$ability)
else if(dgp_method=='multi') mydgp <- anchorpoint:::dgp_multi(arg$nobs,arg$tlength,arg$DIFpercent,arg$Nr.dim,arg$Theta,arg$discriminations,arg$difficulties,arg$DIF_mode,
arg$d_distr,arg$MultiNorm,arg$itemtype)
rm <- anchorpoint:::raschFit(data = mydgp$dat, resp.mat.name = 'i', group.name = 'groups')
rm1 <- rm$rm1
rm2 <- rm$rm2
stopifnot(abs(start_time-Sys.time())<10)
}
# Find the value in c_grid which attain the maximum gini index/CLF using findMaxGridValue() function.
cmaxList <- findMaxGridValue(rm,mydgp$dat, resp.mat.name = 'i', max_method=max_method, dist_method = dist_method, group.name = 'groups')
npeaks <- NA
# Testing for DIF items using alignment methods or anchortest() function
DIFtest = list()
#At least one anchor selection method must be specified
stopifnot(any(c("constant4_AO", "constant4_MPT", "iterativeForward_MTT", "Alignment")%in%anchor_method))
for(anchor_iter in anchor_method){
if(anchor_iter == 'constant4_AO'){
# competitor method constant4_AO, used e.g. by Woods (2009, APM)
DIFtest$DIFtest_AO$val = psychotools::anchortest(rm1, rm2, class = c("constant"), select = "AO", length = 4)[['final_tests']]$test$pvalues
DIFtest$DIFtest_AO$anchor_method = 'constant4_AO'
DIFtest$DIFtest_AO$max_method = DIFtest$DIFtest_AO$dist_method = DIFtest$DIFtest_AO$alias_method = 'none'
}
if(anchor_iter == 'constant4_MPT'){
# competitor method constant4_MPT, suggested by Kopf (2015, EPM)
DIFtest$DIFtest_MPT$val <- psychotools::anchortest(rm1, rm2, class = "constant", select = "MPT", length = 4)[['final_tests']]$test$pvalues
DIFtest$DIFtest_MPT$anchor_method = 'constant4_MPT'
DIFtest$DIFtest_MPT$max_method = DIFtest$DIFtest_MPT$dist_method = DIFtest$DIFtest_MPT$alias_method = 'none'
}
if(anchor_iter == 'iterativeForward_MTT'){
# competitor method iterativeForward_MTT, suggested by Kopf (2015, APM)
DIFtest$DIFtest_MTT$val <- psychotools::anchortest(rm1, rm2, class = "forward", select = "MTT",length = 4)[['final_tests']]$test$pvalues
DIFtest$DIFtest_MTT$anchor_method = 'iterativeForward_MTT'
DIFtest$DIFtest_MTT$max_method = DIFtest$DIFtest_MTT$dist_method = DIFtest$DIFtest_MTT$alias_method = 'none'
}
if(anchor_iter == 'Alignment'){
# Alignment methods (Gini or Muthen&Asparouhov specified in dist_method)
stopifnot(any(c("min_dist","quasi_var","constant4_MPT")%in%alias_method))
Alignments = list()
if('constant4_MPT'%in%alias_method){
for(maxIter in names(cmaxList)){
IterObject = cmaxList[[maxIter]]
anchors = psychotools::anchortest(rm1, rm2, class = "constant", select = "MPT", length = 4)$anchor_items
for(inx in names(IterObject$cmax_val)){
if(inx == "gini"){
name <- paste("constant4MPT",maxIter,inx,sep = "_")
Alignments[[name]]$val = Wald_test(rm1, rm2, c_shift = IterObject$cmax_val$gini, alias_method = "constant4_MPT", alias_anchor_items=anchors, adjust = "none")$p
Alignments[[name]]$max_method = maxIter
Alignments[[name]]$dist_method = 'Gini'
Alignments[[name]]$alias_method = 'constant4_MPT'
Alignments[[name]]$anchor_method = 'Alignment'
}
if(inx == "CLF"){
name <- paste("constant4MPT",maxIter,inx,sep = "_")
Alignments[[name]]$val = anchorpoint:::Wald_test(rm1, rm2, c_shift = IterObject$cmax_val$CLF, alias_method = "constant4_MPT", alias_anchor_items=anchors, adjust = "none")$p
Alignments[[name]]$max_method = maxIter
Alignments[[name]]$dist_method = 'CLF'
Alignments[[name]]$alias_method = 'constant4_MPT'
Alignments[[name]]$anchor_method = 'Alignment'
}
if(inx == "CLF_without_eps"){
name <- paste("constant4MPT",maxIter,inx,sep = "_")
Alignments[[name]]$val = anchorpoint:::Wald_test(rm1, rm2, c_shift = IterObject$cmax_val$CLF_without_eps, alias_method = "constant4_MPT", alias_anchor_items=anchors, adjust = "none")$p
Alignments[[name]]$max_method = maxIter
Alignments[[name]]$dist_method = 'CLF_without_eps'
Alignments[[name]]$alias_method = 'constant4_MPT'
Alignments[[name]]$anchor_method = 'Alignment'
}
}
}
}
if('quasi_var'%in%alias_method){
for(maxIter in names(cmaxList)){
IterObject = cmaxList[[maxIter]]
for(inx in names(IterObject$cmax_val)){
if(inx == "gini"){
name <- paste("quasi_var",maxIter,inx,sep = "_")
Alignments[[name]]$val = anchorpoint:::Wald_test(rm1, rm2, c_shift = IterObject$cmax_val$gini, alias_method = "quasi_var", adjust = "none")$p
Alignments[[name]]$max_method = maxIter
Alignments[[name]]$dist_method = 'Gini'
Alignments[[name]]$alias_method = 'quasi_var'
Alignments[[name]]$anchor_method = 'Alignment'
}
if(inx == "CLF"){
name <- paste("quasi_var",maxIter,inx,sep = "_")
Alignments[[name]]$val = anchorpoint:::Wald_test(rm1, rm2, c_shift = IterObject$cmax_val$CLF, alias_method = "quasi_var", adjust = "none")$p
Alignments[[name]]$max_method = maxIter
Alignments[[name]]$dist_method = 'CLF'
Alignments[[name]]$alias_method = 'quasi_var'
Alignments[[name]]$anchor_method = 'Alignment'
}
if(inx == "CLF_without_eps"){
name <- paste("quasi_var",maxIter,inx,sep = "_")
Alignments[[name]]$val = anchorpoint:::Wald_test(rm1, rm2, c_shift = IterObject$cmax_val$CLF_without_eps, alias_method = "quasi_var", adjust = "none")$p
Alignments[[name]]$max_method = maxIter
Alignments[[name]]$dist_method = 'CLF_without_eps'
Alignments[[name]]$alias_method = 'quasi_var'
Alignments[[name]]$anchor_method = 'Alignment'
}
}
}
}
if('min_dist'%in%alias_method){
for(maxIter in names(cmaxList)){
IterObject = cmaxList[[maxIter]]
for(inx in names(IterObject$cmax_val)){
if(inx == "gini"){
name <- paste("min_dist",maxIter,inx,sep = "_")
Alignments[[name]]$val = anchorpoint:::Wald_test(rm1, rm2, c_shift = IterObject$cmax_val$gini, alias_method = "min_dist",  adjust = "none")$p
Alignments[[name]]$max_method = maxIter
Alignments[[name]]$dist_method = 'Gini'
Alignments[[name]]$alias_method = 'min_dist'
Alignments[[name]]$anchor_method = 'Alignment'
}
if(inx == "CLF"){
name <- paste("min_dist",maxIter,inx,sep = "_")
Alignments[[name]]$val = anchorpoint:::Wald_test(rm1, rm2, c_shift = IterObject$cmax_val$CLF, alias_method = "min_dist", adjust = "none")$p
Alignments[[name]]$max_method = maxIter
Alignments[[name]]$dist_method = 'CLF'
Alignments[[name]]$alias_method = 'min_dist'
Alignments[[name]]$anchor_method = 'Alignment'
}
if(inx == "CLF_without_eps"){
name <- paste("min_dist",maxIter,inx,sep = "_")
Alignments[[name]]$val = anchorpoint:::Wald_test(rm1, rm2, c_shift = IterObject$cmax_val$CLF_without_eps, alias_method = "min_dist", adjust = "none")$p
Alignments[[name]]$max_method = maxIter
Alignments[[name]]$dist_method = 'CLF_without_eps'
Alignments[[name]]$alias_method = 'min_dist'
Alignments[[name]]$anchor_method = 'Alignment'
}
}
}
}
DIFtest = append(DIFtest,Alignments)
}
}
return(list(DIFtest=DIFtest,addInfo = list(DIFindex = mydgp$DIFindex,DIFside = mydgp$DIFside,npeaks = npeaks)))
}
###### repeater ######
#Function for parallel replicate()
#' @param n: type: integer - number of repetitions
#' @param expr: type: function - function to be executed
#' @param cores: type: integer - number of cores that should be used by parallel::mclapply
#' @param seed_parallel: type: integer - seed to control randomness in parallel::mclapply
#' @return matrix containing n repetitions of the given function "expr"
RepParallel <- function(n, expr,cores, seed_parallel = 1,...){
return(parallel::mclapply(integer(n), eval.parent(substitute(function(...) expr)),mc.preschedule = TRUE,mc.cores = cores,mc.set.seed = seed_parallel,simplify = FALSE))
}
# calculates mean hit rate and mean false alarm rate with and without switch rule
#' @param m list containing output from simulation
#' @param tlength interger > 0, test length (number of items)
#' @return list containing mean hit rate and false alarm rate (with and without switch rule)
calcStats <- function(m,tlength){
DIFtest = m$DIFtest
DIFindex = m$addInfo$DIFindex
DIFside = m$addInfo$DIFside
if(length(DIFindex)==0){
hitr_switch = hitr =  0
# hit rate = percentage of true DIF items with significance DIF test 'TRUE'.
# so if there is no true DIF then hitr always ZERO by the definition.
# TRUE/FALSE = significant or non-significant based on the pvalue from DIFtest above.
flaggedDIF <- lapply(
lapply(DIFtest,function(list) return(list$val<=0.05)),function(list) return(which(list==TRUE)))
# index of the DIFitems where the DIFtest (wald test) above indicates a significant result.
falarm_switch = falarm = lapply(flaggedDIF,function(list)return(mean(1:tlength %in% list))) # false alarm rate = percentage of no true DIF items with significance DIF test
}else{
flaggedDIF <- lapply(
lapply(DIFtest,function(list) return(list$val<=0.05)),function(list) return(which(list==TRUE)))
# index of the DIFitems where the DIFtest (wald test) above indicates a significant result.
#Switch rule:
itemCluster1_noDIF = which(DIFside == 0)
itemCluster2_negDIF = which(DIFside == -1)
itemCluster3_posDIF = which(DIFside == 1)
FAR_HITR_temp <- lapply(flaggedDIF,function(flagged,itemClusters){
mean1 = mean(itemClusters$itemCluster1 %in% flagged)
mean2 = mean(itemClusters$itemCluster2 %in% flagged)
mean3 = mean(itemClusters$itemCluster3 %in% flagged)
noDIFindices = unlist(itemClusters[which.min(c(mean1,mean2,mean3))])
FAR = mean(noDIFindices%in%flagged)
HITR = mean(seq(tlength)[-noDIFindices]%in%flagged)
return(list("FAR" = FAR,"HITR" = HITR))
}, itemClusters = list("itemCluster1" = itemCluster1_noDIF,"itemCluster2" = itemCluster2_negDIF,"itemCluster3" = itemCluster3_posDIF)) # false alarm rate = percentage of no true DIF items with significance DIF test
hitr_switch <- lapply(FAR_HITR_temp,FUN = function(x)return(x$HITR))
falarm_switch <- lapply(FAR_HITR_temp,FUN = function(x)return(x$FAR))
## Conventional rule: If there is some true DIF items (we assume in simulation from dgp DIFpercent > 0%)
DIFitems <- DIFindex                           # index of DIF items
noDIFitems <- c(1:tlength)[-DIFitems]       # index of items with no-DIF.
hitr <- lapply(flaggedDIF,function(list){
return(mean(DIFitems %in% list))
}) # hit rate = percentage of true DIF items with significance DIF test 'TRUE'
falarm <- lapply(flaggedDIF,function(list){
return(mean(noDIFitems %in% list))
}) # false alarm rate = percentage of no true DIF items with significance DIF test
}
return(list(hitr = hitr,hitr_switch = hitr_switch,falarm = falarm,falarm_switch = falarm_switch))
}
# repeater_simulation() function reapeats a given setup from setup_simulation()
# It uses one_simulation, which computes a single simulation, to do nrep simulations of the settings given
# It then computes the key statistics for this given setup: mean false alarm rate and mean hit rate
# It return a list with the statistics and all settings
#' @param nrep=1: type: integer - number of times we would like to repeat the oneSimulation() function.
#' @param arg=NULL: type: list - contains the arguments to be passed to dgp() function to simulate the data in (uni or multidimensional)
#' @param methods: type: list - contains all methods to be used: dgp_method, alias_method, max_method, dist_method, anchor_method
#' @param cores: type: integer - number of cores that should be used by parallel::mclapply, default 1, i.e. not parallelising
#' @param seed_parallel: type: integer - seed to control randomness in parallel::mclapply
#' @param parallel_bool: type: logical - use parallel computation or not
#' @return data.frame containing arguments used and corresponding results. number of rows are the number combination possible from the parameters given.
#' results are: false alarm rate (falarm), hit rate (hitr) and the grid value where the maximum (cmax_val) is achieved
repeater_simulation <- function(nrep=1, arg=NULL, methods,cores = 1,seed_parallel = 1,doParallel = FALSE, ...){
anchor_method = unlist(methods$anchor_method)
alias_method = unlist(methods$alias_method)
dist_method = unlist(methods$dist_method)
dgp_method = unlist(methods$dgp_method)
max_method = unlist(methods$max_method)
tlength = arg$tlength
if(doParallel){
m <- RepParallel(nrep, one_simulation(arg = unlist(arg,recursive = F), dgp_method = dgp_method, alias_method=alias_method,
max_method=max_method, dist_method = dist_method, anchor_method = anchor_method),cores = cores,seed_parallel = seed_parallel)
}else{
m <- replicate(nrep, one_simulation(arg = unlist(arg,recursive = F), dgp_method = dgp_method, alias_method=alias_method,
max_method=max_method, dist_method = dist_method, anchor_method = anchor_method),simplify = FALSE)
}
dataStats = lapply(X = m,FUN = calcStats,tlength = tlength)
hitr = lapply(dataStats,function(x){return(x$hitr)})
names_list = list(names(hitr[[1]]))
## Compute the average over the repetitions of the falarm, hitr and cmax_val
hitr_rep = rowMeans(matrix(apply(as.matrix(lapply(hitr,unlist)),MARGIN = 1,FUN = unlist),ncol = nrep,dimnames = names_list))
falarm_rep = rowMeans(matrix(apply(as.matrix(lapply(lapply(dataStats,function(x){return(x$falarm)}),unlist)),MARGIN = 1,FUN = unlist),ncol = nrep,dimnames = names_list))
hitr_rep_switch = rowMeans(matrix(apply(as.matrix(lapply(lapply(dataStats,function(x){return(x$hitr_switch)}),unlist)),MARGIN = 1,FUN = unlist),ncol = nrep,dimnames = names_list))
falarm_rep_switch = rowMeans(matrix(apply(as.matrix(lapply(lapply(dataStats,function(x){return(x$falarm_switch)}),unlist)),MARGIN = 1,FUN = unlist),ncol = nrep,dimnames = names_list))
method_list = lapply(m[[1]]$DIFtest,FUN = function(list_obj){
return(list_obj[2:5])
})
npeaks_rep <- NA
nobs <- sum(unlist(arg$nobs))
if(dgp_method == "uni"){
DIFpercent <- unlist(arg$DIFpercent)
DIF_mode = NA
DIFpattern <- unlist(arg$DIFpattern)
DIFeffect <- unlist(arg$DIFeffect)
ability <- unlist(arg$ability)
itemtype <- NA
}else{
DIFpercent = unlist(arg$DIFpercent)
DIFpattern = DIFeffect = ability <- NA
DIF_mode = unlist(arg$DIF_mode)
itemtype = unlist(arg$itemtype)
}
return(data.frame(nobs=nobs, tlength=tlength, DIFpercent=DIFpercent,DIF_mode=DIF_mode, DIFpattern=DIFpattern, DIFeffect=DIFeffect,
ability=ability, dgp_method=dgp_method, itemtype = itemtype,
alias_method=unlist(lapply(method_list,FUN = function(list_obj) return(list_obj$alias_method)),use.names = F),
max_method=unlist(lapply(method_list,FUN = function(list_obj) return(list_obj$max_method)),use.names = F),
dist_method=unlist(lapply(method_list,FUN = function(list_obj) return(list_obj$dist_method)),use.names = F),
anchor_method=unlist(lapply(method_list,FUN = function(list_obj) return(list_obj$anchor_method)),use.names = F),
falarm=falarm_rep, hitr=hitr_rep,falarm_switch = falarm_rep_switch,hitr_switch = hitr_rep_switch, npeaks=npeaks_rep))
}
###### setup ######
#helper function for simulation
doSim <- function(prs,n,m,nrep,fraction_cores,seed_parallel,doParallel,doProgressbar){
## L arguments
argumentList <- split(prs[,1:n], seq(nrow(prs[,1:n])))
## the list of 'methods'
methodList <- split(prs[,(n+1):m], seq(nrow(prs[,(n+1):m])))
if(doParallel && doProgressbar){
if (.Platform$OS.type == "windows") {
cores = 1
} else {
cores =  floor((parallel::detectCores())*fraction_cores) #check how many cores are available (and leave some for others -> fraction > 1)
}
rval <-  pbmcapply::pbmcmapply(FUN = repeater_simulation, arg=argumentList,methods=methodList,nrep=nrep,SIMPLIFY = FALSE,seed_parallel = seed_parallel, cores = cores,mc.preschedule = TRUE,mc.cores = cores, mc.set.seed = seed_parallel)
if("warning" %in% names(rval)){
print(rval$warning)
rval <- rval$value
}
}else if(doProgressbar){#show progress bar or not
rval <-  pbapply::pbmapply(repeater_simulation, arg=argumentList,methods=methodList,nrep=nrep,SIMPLIFY = FALSE)
}else if(doParallel){#do parallel operations
if (.Platform$OS.type == "windows") {
cores = 1
} else {
cores =  floor((parallel::detectCores())*fraction_cores) #check how many cores are available (and leave some for others -> fraction > 1)
}
rval <-  parallel::mcmapply(repeater_simulation, arg=argumentList,methods=methodList,nrep=nrep,SIMPLIFY = FALSE,seed_parallel = seed_parallel, cores = cores,mc.preschedule = TRUE,mc.cores = cores, mc.set.seed = seed_parallel)
}else rval <-  mapply(repeater_simulation, arg=argumentList,methods=methodList,nrep=nrep,SIMPLIFY = FALSE) # computation without parallelisation nor progressbar
rval <- plyr::rbind.fill(rval)
rval$nrep <- nrep
return(rval)
}
# setup_simulation() function prepares setup for simulation which is then fed to repeaterSimulation.R
#' @param arg=NULL: type: list - contains the arguments to be passed to dgp_uni() function to simulate the data in unidimensional basis.
#' @param L=NULL: type: list - contains the arguments to be passed to dgp_multi() function to simulate the data in multidimensional basis.
#' @param methods: type: list - contains all methods to be used: dgp_method, alias_method, max_method, dist_method, anchor_method
#' @param nrep=1: type: integer - number of times we would like to repeat the oneSimulation() function.
#' @param progressbar=FALSE: type: logical - show progress in console
#' @param doParallel=FALSE: type: logical - do parallel computation
#' @param seed_parallel=1: type: integer - seed for parallel computation
#' @param fraction_cores=1: type: numeric in (0,1] - fraction of available cores to be used (if 1, then all available cores are used)
#' @return data.frame containing arguments used and corresponding results. number of rows are the number combination possible from the parameters given.
#' results are: false alarm rate (falarm), hit rate (hitr) and the value achieved at the maximum (cmax_val)
setup_simulation <- function(oneDIM=NULL,multiDIM=NULL,methods,nrep=1,doProgressbar=F,doParallel=F,seed_parallel = 1,fraction_cores = 0.5,...){
results = list()
# For one dimensional model simulation
if(!is.null(oneDIM)){
# Use exapnd.grid to find all different combinations of the arguments.
prs <- expand.grid(oneDIM,stringsAsFactors = FALSE)
n <- dim(prs)[2] ## number of the arguments of 'oneDIM' used in expand.grid().
# could be extended in the grid however.. tbd)
prs$dgp_method = rep(list("uni"), dim(prs)[1])
# alias method, anchor method, dist_method, max_method not included in the grid. This allows computing only 1 dgp for all of them
prs$dist_method = rep(list(methods$dist_method), dim(prs)[1])
prs$max_method = rep(list(methods$max_method), dim(prs)[1])
prs$alias_method = rep(list(methods$alias_method), dim(prs)[1])
prs$anchor_method = rep(list(methods$anchor_method), dim(prs)[1])
m <- dim(prs)[2] ## number  of all arguments includes 'oneDIM' arguments and the 'methods'.
# For no DIF situation no "favorref" and "favorfoc setting"
favorSettingDIF0 <- which(prs$DIFpattern == "favorref" | prs$DIFpattern == "favorfoc" & prs$DIFpercent == 0)
if(length(favorSettingDIF0)) prs <- prs[-favorSettingDIF0,]
rownames(prs) <- 1:nrow(prs)
# Set a seed for each set of arguments (deprecated)
prs$seed <- as.integer(paste(ifelse(nchar(prs$nobs) == 11, paste(substr(prs$nobs,3,4),substr(prs$nobs,8,9),sep=""),
ifelse(nchar(prs$nobs) == 12, paste(substr(prs$nobs,3,4),substr(prs$nobs,9,10),sep=""),paste(substr(prs$nobs,3,4),substr(prs$nobs,9,10),sep=""))),
ifelse(prs$DIFpercent==0,0,
ifelse(prs$DIFeffect == "uniform",
ifelse(prs$DIFpercent==0.45,0,substr(prs$DIFpercent,3,3)),
ifelse(prs$DIFpercent==0.45,5,as.numeric(substr(prs$DIFpercent,3,3))+5)
)
),
ifelse(prs$DIFeffect == "normal",
ifelse(prs$DIFpattern == "balanced"&prs$ability==TRUE,1,
ifelse(prs$DIFpattern == "balanced"&prs$ability==FALSE,3,
ifelse(prs$DIFpattern == "favorref"&prs$ability==TRUE,5,8))),
ifelse(prs$DIFeffect == "uniform",
ifelse(prs$DIFpattern == "balanced"&prs$ability==TRUE,1,
ifelse(prs$DIFpattern == "balanced"&prs$ability==FALSE,3,
ifelse(prs$DIFpattern == "favorref"&prs$ability==TRUE,5,8)))+1,
ifelse(prs$DIFpattern == "balanced"&prs$ability==TRUE,0,
ifelse(prs$DIFpattern == "balanced"&prs$ability==FALSE,7,
ifelse(prs$DIFpattern == "favorref"&prs$ability==TRUE,3,8)
))
)),
sep=""))
## Split the arguments into two sets: argumentList=oneDIM represent the arguments used to generate the data in dgp()
## and methodList=methods used in repeater_simulation() function.
print("simulation one dimensional starting...")
results$uni = doSim(prs,n,m,nrep,fraction_cores,seed_parallel,doParallel,doProgressbar)
print("...done!")
}
if(!is.null(multiDIM)){# For multi dimensional model simulation
prs <- expand.grid(multiDIM,stringsAsFactors = FALSE)
n <- dim(prs)[2] ## number of the arguments of 'multiDIM' used in expand.grid().
prs$dgp_method = rep(list("multi"), dim(prs)[1])
# alias method and anchor method not included in the grid. This allows computing only 1 dgp for all of them.
prs$dist_method = rep(list(methods$dist_method), dim(prs)[1])
prs$max_method = rep(list(methods$max_method), dim(prs)[1])
prs$alias_method = rep(list(methods$alias_method), dim(prs)[1])
prs$anchor_method = rep(list(methods$anchor_method), dim(prs)[1])
m <- dim(prs)[2] ## numberof all arguments includes 'multiDIM' arguments and the 'methods'.
rownames(prs) <- 1:nrow(prs)     # new rownames
print("simulation multi dimensional starting...")
results$multi = doSim(prs,n,m,nrep,fraction_cores,seed_parallel,doParallel,doProgressbar)
print("...done!")
}
return(results)
}
###### prep ######
# simulation preparations
# main function to run the simulation
#' @param oneDIM list, contains the arguments to be passed to dgp_uni() function to simulate the data in unidimensional basis.
#' - minimum variables attached: nobs (as a list with the number of observations per group, e.g. from get_eq_groups() function), tlength (as integer vector), DIFpercent (as vector with fractions)
#' @param multiDIM  list, contains the arguments to be passed to dgp_multi() function to simulate the data in multidimensional basis.
#' - minimum variables attached: nobs (as a list with the number of observations per group, e.g. from get_eq_groups() function), tlength (as integer vector), DIFpercent (as vector with fractions)
#' @param methods list, contains all methods to be used: dgp_method, alias_method, max_method, dist_method, anchor_method
#' @param nrep positive integer, number of times we would like to repeat the oneSimulation() function.
#' @param returnResults logical, show progress in console, default TRUE
#' @param saveResults logical, do parallel computation, default FALSE
#' @param directory logical, do parallel computation
#' @param doProgressbar logical, do parallel computation, default TRUE
#' @param doParallel logical, do parallel computation, default TRUE
#' @param seed a single value, interpreted as an integer, or NULL
#' @param fraction_cores positive numeric <= 1, fraction of available cores to be used (if 1, then all available cores are used)
#' @param printSessionInfo logical, save R session information locally as SESSIONINFO.txt, default FALSE
#' @return data.frame containing arguments used and corresponding results. number of rows are the number combination possible from the parameters given.
#' results are: false alarm rate (falarm), hit rate (hitr) and the value achieved at the maximum (cmax_val)
sim <- function(oneDIM = NULL,multiDIM = NULL,methods = NULL,nrep = 1,
returnResults = TRUE,saveResults = FALSE,directory = NULL,
doProgressbar = TRUE,doParallel = TRUE,seed = 1,fraction_cores = 1,
printSessionInfo = FALSE){
#set directory
if(!is.null(directory)) setwd(directory) else directory <- getwd()
#saves session info (to current directory)
if(printSessionInfo) writeLines(capture.output(sessionInfo()), "SESSIONINFO.txt")
#seed for controlling random processes
set.seed(seed)
#default methods list
if(is.null(methods)) methods = list(max_method = c('sparse','symmetric'),
dist_method=c('Gini Index','CLF Criterion'),
anchor_method = c("constant4_AO","Alignment","constant4_MPT","iterativeForward_MTT"),
alias_method= c('min_dist'))
results <- setup_simulation(oneDIM = oneDIM,multiDIM = multiDIM,nrep=nrep,methods=methods, doProgressbar = doProgressbar,doParallel = doParallel,seed_parallel = seed,fraction_cores = fraction_cores)
if(saveResults & !(is.null(oneDIM) & is.null(multiDIM))) save_results(results,directory,nrep,add2filename = c(ifelse(!is.null(oneDIM),"uni",NA),ifelse(!is.null(multiDIM),"multi",NA)))
if(returnResults) return(results)
else return(NULL)
}
######  run the simulation : ######
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# required files:
source("helper.R")
source("simulation.R")
multiDIM <- list(nobs = get_eq_groups(seq(250,750,250)),tlength = c(40),
DIFpercent = c(0,.2,.4,.6),DIF_mode = list("intersect"), d_distr = list(list(mean = 0, sd = .5)),
MultiNorm = list(list(list(means  = c(-0.5,rep(-0.5,1)),cov = c(1,0.5)), list(means = c(0.5,rep(0.5,1)),cov = c(1,0.5)))),
# two values for variance and dependencies: c(var,covariance) OR complete covariance matrix in right dimension (Nr.dim x Nr.dim) !
itemtype = 'dich')
oneDIM <- list(nobs=get_eq_groups(seq(250,750,250)),
tlength = c(40),
DIFpercent = c(0,.2,.4,.6),
DIFpattern = c("balanced","favorfoc"),
DIFeffect="constant",
DIFamount=0.6,
ability=TRUE)
methods = list(max_method = c('sparse','symmetric'),
dist_method=c('Gini','CLF'),
anchor_method = c("constant4_AO","Alignment","constant4_MPT","iterativeForward_MTT"),
alias_method= c('min_dist'))
results <- sim(
oneDIM = oneDIM,multiDIM = multiDIM,methods = methods,nrep = 2,
returnResults = TRUE,saveResults = FALSE
)
results <- sim(
oneDIM = oneDIM,multiDIM = multiDIM,methods = methods,nrep = 2,
returnResults = TRUE,saveResults = FALSE
)
source("simulation.R")
source("simulation.R")
results <- sim(
oneDIM = oneDIM,multiDIM = multiDIM,methods = methods,nrep = 2,
returnResults = TRUE,saveResults = FALSE
)
devtools::document
devtools::document()
devtools::document()
devtools::check()
library(psychotree)
SPISA
library("psychotools")
psychotools::
data("SPISA")
?SPISA
psychotree::SPISA
?psychotree::SPISA
psychotree:::SPISA
psychotree::SPISA
psychotree::SPISA()
?SPISA
library("psychotree")
data("SPISA")
devtools::document()
devtools::check()
?rpart
?partykit
install.packages("partykit")
install.packages("partykit")
?partykit
devtools::check()
install.packages("multcomp")
library(multcomp)
install.packages("party")
devtools::check()
install.packages("multcomp")
devtools::check()
devtools::check()
devtools::document()
devtools::check()
devtools::build()
devtools::document()
devtools::check()
devtools::build()
