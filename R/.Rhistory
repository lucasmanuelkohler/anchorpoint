library(anchorpoint)
?getData
#install package
devtools::install_github("lucasmanuelkohler/anchorpoint",ref="main", quiet = TRUE)
library("anchorpoint")
data = getData(
nobs=c(100),
tlength = c(20),
DIFpercent = c(.2),
type = "uni")
rm1 = data$RM$rm1;rm2 = data$RM$rm2
#Run
anchorpoint_test <- anchorpoint(rm1, rm2, select = c("Gini","CLF"), grid = c("symmetric","sparse"))
#do graphical test
graphicalTest(anchorpoint_test)
?plotGOF
#Run
anchorpoint_test <- anchorpoint(rm1, rm2, select = c("Gini"), grid = c("sparse"))
waldtestpV(anchorpoint_test)
WaldtestpV(anchorpoint_test)
WaldtestpV(anchorpoint_test, shift = 1)
# rounds the values in its first argument to the specified number of significant digits.
WaldtestpV(anchorpoint_test, shift = -1,digits = 1)
#do graphical test
graphicalTest(anchorpoint_test)
library(eRm)
#do graphical test
graphicalTest(anchorpoint_test)
full_lrt <- LRtest(RM(data$DGP$i,se = TRUE),splitcr = data$DGP$groups,se = TRUE)
plotGOF(full_lrt,conf = list(gamma = 0.95, col = "red", lty = "dashed"))
eRm::plotDIF(full_lrt, gamma = .95, col = "red")
library(eRm)
full_lrt <- LRtest(RM(data$DGP$i,se = TRUE),splitcr = data$DGP$groups,se = TRUE)
plotGOF(full_lrt,conf = list(gamma = 0.95, col = "red", lty = "dashed"))
#do graphical test
graphicalTest(anchorpoint_test)
plotGOF
plotGOF(full_lrt,conf = list(gamma = 0.95, col = "red", lty = "dashed"))
full_lrt$selist[[1L]]
full_lrt$selist[[2L]]
#' rm1 <- fit$rm1
#' rm2 <- fit$rm2
#'
#' # Fit an Anchorpoint object
#' ap_object <- anchorpoint(rm1,rm2,select = "Gini Index", grid = "sparse")
#'
#' # Use the Anchorpoint object to get the graphical test
#' graphicalTest(ap_object)
#' @references
#' Credit: Part of the code is adapted from the function \code{plotGOF} of the package \pkg{eRm} (Version:  (Version: 1.32.1).).
graphicalTest <- function(object,shift = NULL,highlight = NULL,alpha = 0.05,
testColors = list("not significant"="darkgreen","significant"="red3","anchor item"="black"),TestResults = NULL,ask = TRUE,...){
if (!inherits(object, "anchorpoint"))
stop("use only with \"anchorpoint\" objects")
# Do plot with a specific shift
plt <- function(shift,...){
stopifnot("Shift must be numeric" = is.numeric(shift))
if (!inherits(TestResults, "Waldtest")) TestResults <- getWald(object$rm,shift = shift)
beta1 <- c(0, stats::coef(object$rm$rm1))
cf2 <- c(0, stats::coef(object$rm$rm2))
beta2 <- cf2 + shift
len <- length(beta1)
results <- rep(NA, len)
names(results) <- colnames(object$rm$rm1$data)
aliased_item <- which(is.na(TestResults$p))
#standard approach (extracting variance estimation from rasch model fit & calculating p-values with test statistic: diff(b1,b2)/sqrt(var1_hat + var2_hat) ~ N(0,1)
# (thats how it was implemented - as we deal with unknown variances, a t-test would probably more suitable..)
standard <- function(){
vars <- diag(TestResults$vcov)
v1 = rep(0,length(beta1))
v1[seq(1:length(beta1))[-aliased_item]] <- vars[1:length(beta1)-1]
v2 = rep(0,length(beta1))
v2[seq(1:length(beta1))[-aliased_item]] <- vars[-(1:length(beta1)-1)]
return(list(s1 = sqrt(v1), s2 = sqrt(v2), pvalues = TestResults$p))
}
res <- standard()
print(res)
results[seq(1:len)[-aliased_item]] <- res$pvalues[-aliased_item]
names(testColors) <- c("not significant","significant","anchor item")
if(!is.list(testColors)) testColors = as.list(testColors)
colVec = rep(testColors$`not significant`,length(beta1))
colVec[which(results<alpha)] <- testColors$significant
colVec[which(is.na(results))] <- testColors$`anchor item`
z <- stats::qnorm(alpha/2.0, lower.tail = FALSE)
setRange <- max(diff(range(beta1)+c(-1,1)*stats::var(beta1)/2),diff(range(beta2)+c(-1,1)*stats::var(beta2)/2))
rangeBeta1 <- min(beta1) + diff(range(beta1))/2 +c(-1,1)*setRange/2
rangeBeta2 <- min(beta2) + diff(range(beta2))/2 +c(-1,1)*setRange/2
ci1u <- beta1 + z*res$s1
ci1l <- beta1 - z*res$s1
ci2u <- beta2 + z*res$s2
ci2l <- beta2 - z*res$s2
pchVector = rep(20,length(beta1))
pchVector[aliased_item] <- 18
plot(beta1,beta2,xlim = rangeBeta1,ylim = rangeBeta2,pch = pchVector,col = scales::alpha(colVec, 0.8),main = "Graphical Test Plot",xlab = "Item Parameters group 0",ylab = "Item Parameters group 1",...)
graphics::abline(coef = c(0,1))
graphics::text(x = beta1,y = beta2,labels =  1:length(beta1), cex= 0.5,pos = 4,col=colVec)
# simple ellipse to replace the function ellipse() from the car package
simple_ellipse <- function(center, a, b, n = 200L, border_col, col){
angle_t <- seq(0, 2*pi, length.out = n)[-1L]
graphics::polygon(center[1L] + a * cos(angle_t), center[2L] + b * sin(angle_t), lwd = 1.0, border = border_col,col = col)
}
highlight <- if(is.null(highlight)) numeric(0)
else if(is.character(highlight)) as.numeric(highlight)
else if(highlight == "significant") which(results<alpha)
for(i in 1:length(beta1)){
graphics::segments( x0 = c(beta1[i], ci1l[i]), y0 = c(ci2l[i], beta2[i]),
x1 = c(beta1[i], ci1u[i]), y1 = c(ci2u[i], beta2[i]),
col = scales::alpha(colVec[i], 0.4),lwd = 1,...)
simple_ellipse( center = c(beta1[i],beta2[i]),
a = abs(diff(c(ci1u[i],ci1l[i])))/2,
b = abs(diff(c(ci2u[i],ci2l[i])))/2,
n = 200L, border_col = scales::alpha(colVec[i], 0.9), col = if(i %in% highlight) scales::alpha(colVec[i], 0.4) else NA)
}
}
if(is.null(shift)){
if(ask & (length(object$criterion) > 1 || length(object$grid) > 1)){
oask <- grDevices::devAskNewPage(TRUE)
on.exit(grDevices::devAskNewPage(oask))
}
temp <- object$all_results
for(grid in names(temp)){
for(criterion in names(temp[[grid]])){
plt(object$global_optimum[[grid]][[criterion]]$shift,...)
}
}
}else plt(shift,...)
}
#do graphical test
graphicalTest(anchorpoint_test)
devtools::build()
#do graphical test
graphicalTest(anchorpoint_test)
#install package
devtools::install_github("lucasmanuelkohler/anchorpoint",ref="main", quiet = TRUE)
library("anchorpoint")
data = getData(
nobs=c(100),
tlength = c(20),
DIFpercent = c(.2),
type = "uni")
rm1 = data$RM$rm1;rm2 = data$RM$rm2
#Run
anchorpoint_test <- anchorpoint(rm1, rm2, select = c("Gini"), grid = c("sparse"))
#do graphical test
graphicalTest(anchorpoint_test)
#do graphical test
graphicalTest(anchorpoint_test)
graphicalTest
devtools::document()
devtools::check()
devtools::build()
#install package
devtools::install_github("lucasmanuelkohler/anchorpoint",ref="main", quiet = TRUE)
remove.packages("anchorpoint")
#install package
devtools::install_github("lucasmanuelkohler/anchorpoint",ref="main", quiet = TRUE)
library("anchorpoint")
data = getData(
nobs=c(100),
tlength = c(20),
DIFpercent = c(.2),
type = "uni")
rm1 = data$RM$rm1;rm2 = data$RM$rm2
#Run
anchorpoint_test <- anchorpoint(rm1, rm2, select = c("Gini"), grid = c("sparse"))
#do graphical test
graphicalTest(anchorpoint_test)
full_lrt$selist[[1L]]
library(eRm)
full_lrt <- LRtest(RM(data$DGP$i,se = TRUE),splitcr = data$DGP$groups,se = TRUE)
plotGOF(full_lrt,conf = list(gamma = 0.95, col = "red", lty = "dashed"))
full_lrt$selist[[1L]]
full_lrt$selist[[2L]]
devtools::document()
devtools::check()
devtools::build()
#install package
devtools::install_github("lucasmanuelkohler/anchorpoint",ref="main", quiet = TRUE)
library("anchorpoint")
data = getData(
nobs=c(100),
tlength = c(20),
DIFpercent = c(.2),
type = "uni")
rm1 = data$RM$rm1;rm2 = data$RM$rm2
#Run
anchorpoint_test <- anchorpoint(rm1, rm2, select = c("Gini"), grid = c("sparse"))
#do graphical test
graphicalTest(anchorpoint_test)
library(eRm)
full_lrt <- LRtest(RM(data$DGP$i,se = TRUE),splitcr = data$DGP$groups,se = TRUE)
plotGOF(full_lrt,conf = list(gamma = 0.95, col = "red", lty = "dashed"))
full_lrt$selist[[1L]]
full_lrt$selist[[2L]]
?citation(mirt)
citation(mirt)
citation("mirt")
devtools::document()
devtools::check()
devtools::build()
#install package
devtools::install_github("lucasmanuelkohler/anchorpoint",ref="main", quiet = TRUE)
library("anchorpoint")
data = getData(
nobs=c(100),
tlength = c(20),
DIFpercent = c(.2),
type = "uni")
?anchorpoint
citation(anchorpoint)
citation("anchorpoint")
citation(anchorpoint)
citation("anchorpoint")
